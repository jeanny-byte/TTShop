/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramService } from "../telegram.service";
import { TelegramCreateInput } from "./TelegramCreateInput";
import { Telegram } from "./Telegram";
import { TelegramFindManyArgs } from "./TelegramFindManyArgs";
import { TelegramWhereUniqueInput } from "./TelegramWhereUniqueInput";
import { TelegramUpdateInput } from "./TelegramUpdateInput";

export class TelegramControllerBase {
  constructor(protected readonly service: TelegramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Telegram })
  async createTelegram(
    @common.Body() data: TelegramCreateInput
  ): Promise<Telegram> {
    return await this.service.createTelegram({
      data: data,
      select: {
        chatBotId: true,
        chatId: true,
        createdAt: true,
        id: true,
        netlifyApiKey: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Telegram] })
  @ApiNestedQuery(TelegramFindManyArgs)
  async telegrams(@common.Req() request: Request): Promise<Telegram[]> {
    const args = plainToClass(TelegramFindManyArgs, request.query);
    return this.service.telegrams({
      ...args,
      select: {
        chatBotId: true,
        chatId: true,
        createdAt: true,
        id: true,
        netlifyApiKey: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Telegram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegram(
    @common.Param() params: TelegramWhereUniqueInput
  ): Promise<Telegram | null> {
    const result = await this.service.telegram({
      where: params,
      select: {
        chatBotId: true,
        chatId: true,
        createdAt: true,
        id: true,
        netlifyApiKey: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Telegram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegram(
    @common.Param() params: TelegramWhereUniqueInput,
    @common.Body() data: TelegramUpdateInput
  ): Promise<Telegram | null> {
    try {
      return await this.service.updateTelegram({
        where: params,
        data: data,
        select: {
          chatBotId: true,
          chatId: true,
          createdAt: true,
          id: true,
          netlifyApiKey: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Telegram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegram(
    @common.Param() params: TelegramWhereUniqueInput
  ): Promise<Telegram | null> {
    try {
      return await this.service.deleteTelegram({
        where: params,
        select: {
          chatBotId: true,
          chatId: true,
          createdAt: true,
          id: true,
          netlifyApiKey: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
